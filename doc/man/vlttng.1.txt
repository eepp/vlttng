vlttng(1)
=========
:revdate: 30 January 2020


NAME
----
vlttng - generate an LTTng virtual environment


SYNOPSIS
--------
Generate an LTTng virtual environment:

[verse]
*vlttng* [opt:--force] [opt:--ignore='PROJECT']... [opt:--override='ORIDE']...
       [opt:--profile='PROFILE']... [opt:--jobs[='JOBS']] [opt:--verbose] 'VPATH'

List the default profile names:

[verse]
*vlttng* --list-default-profiles


DESCRIPTION
-----------
`vlttng` is a command-line tool which generates a virtual environment (a
sandbox) in which a specific set of https://lttng.org/[LTTng] packages
are installed. The recognized projects, as of
`vlttng`{nbsp}{vlttng_version}, are:

`babeltrace`::
    Babeltrace 1 (deprecated trace converter and viewer)

`babeltrace2`::
    Babeltrace 2 (trace converter and viewer)

`elfutils`::
    elfutils (optional dependency of Babeltrace{nbsp}1 and{nbsp}2)

`glib`::
    GLib 2 (dependency of Babeltrace{nbsp}1 and{nbsp}2)

`libxml2`::
    Libxml2 (dependency of LTTng-tools)

`lttng-analyses`::
    LTTng analyses

`lttng-modules`::
    LTTng-modules

`lttng-scope`::
    LTTng Scope

`lttng-tools`::
    LTTng-tools

`lttng-ust`::
    LTTng-UST

`popt`::
    popt (dependency of LTTng-tools and Babeltrace{nbsp}1)

`tracecompass`::
    Trace Compass

`urcu`::
    Userspace RCU (dependency of LTTng-tools and LTTng-UST)

Have a look at man:vlttng-quick(1), which creates a `vlttng` command
line after asking you a few questions interactively.


How does vlttng work?
~~~~~~~~~~~~~~~~~~~~~
The `vlttng` command does the following:

. Reads one or more _profiles_ that you give on the command line to know
  which packages to fetch and build.

. Fetches and extracts the requested packages.
+
vlttng supports Git with a specific branch/tag/commit as well as
HTTP/FTP tarball sources. The Git clone URL can point to a local Git
repository using the `file://` protocol.

. Builds one package at a time, setting some environment variables and
  configure options so that the dependencies of the packages are
  contained within the virtual environment.

. Creates an `activate` script which you can _source_ from your
  Bash/Zsh prompt to ``enter'' the virtual environment.
+
This script sets a few environment variables, like `PATH`,
`LD_LIBRARY_PATH`, and `PYTHONPATH`, to achieve this. By default, it
also prepends the name of the virtual environment directory to your
shell prompt for you to know which virtual environment is active.
+
When you source the `activate` script, if the LTTng-modules project is
part of the effective profile, `vlttng` removes the currently loaded
LTTng kernel modules and sets the `MODPROBE_OPTIONS` environment
variable so that the LTTng session daemon loads the virtual environment
modules.

Example:

----
$ vlttng -p lttng-stable-2.8 -p babeltrace-master \
         -p babeltrace-python -p lttng-tools-no-lttng-relayd \
         -p urcu-stable-0.9 virt
----

Here, we're using five profiles to create a virtual environment in the
`virt` directory. Source the generated `activate` script to enter the
virtual environment:

----
$ . ./virt/activate
----

Your prompt starts with `[virt]` after this (the name of the virtual
environment directory).

``Exit'' the virtual environment with the `vlttng-deactivate` command.
Your prompt will return to its previous value.


Write and use profiles
~~~~~~~~~~~~~~~~~~~~~~
A vlttng profile is a layer of configuration. You can use multiple
profiles to create an _effective profile_.

The project ships with default, built-in profiles. Get the full list
with the opt:--list-default-profiles option.

Profiles are written in YAML. Here is an example:

[source,yaml]
build-env:
  CFLAGS: -O0 -g3
virt-env:
  ENABLE_FEATURE: '1'
  SOME_PATH: /path/to/omg
projects:
  lttng-tools:
    source: 'git://git.lttng.org/lttng-tools.git'
    checkout: stable-2.11
    build-env:
      CC: clang
      CFLAGS: ''
  lttng-ust:
    source: 'http://lttng.org/files/lttng-ust/lttng-ust-2.11.0.tar.bz2'
    configure: --enable-python-agent
  lttng-modules:
    source: 'git://git.lttng.org/lttng-modules.git'
    checkout: stable-2.11
  urcu:
    source: 'git://git.liburcu.org/userspace-rcu.git'

A few things to note here:


* The root `build-env` property defines the base build environment
  variables. They are set when building the projects. `vlttng` also
  passes exported shell variables to the executed programs, so you can
  do:
+
----
$ CC=clang CFLAGS='-O0 -g3' vlttng ...
----

* The root `virt-env` property defines the virtual environment
  variables, which are set when you activate the virtual environment.
  Exported shell variables when you run `vlttng` are _not_ set when
  you activate the resulting virtual environment.

* The `build-env` property of a specific project defines environment
  variables to be used only during the build stage of this project. A
  project-specific build-time environment variable overrides a base
  build-time environment variable sharing its name.

* When the `source` property contains a Git URL, or when the `checkout`
  property is set, the `checkout` property indicates which branch, tag,
  or commit to check out. When it's not specified, `vlttng` checks out
  the `master` branch.

* The `configure` property specifies the options to pass to the
  `configure` script of a given project. `vlttng` takes care of some
  options itself, like `--prefix` and `--without-lttng-ust`, to create a
  working virtual environment.

You can save the profile above to a file, for example `my-profile.yml`,
and then you can create a virtual environment out of it:

----
$ vlttng -p my-profile.yml virt
----

When you give multiple profiles to `vlttng`, the first profile is
``patched'' with the second, which is then patched with the third, and
so on, as such:

* Nonexistent properties are created.
* Existing properties are replaced recursively.
* The `configure` properties are _joined_.

For example, let's add the following profile (call it `more.yaml`) to
the example above:

[source,yaml]
build-env:
  CFLAGS: -O0
  SOMEVAR: ok
projects:
  lttng-tools:
    source: 'https://github.com/lttng/lttng-tools.git'
  lttng-ust:
    configure: --enable-java-agent-jul

With this command:

----
vlttng -p my-profile.yml -p more.yaml virt
----

the effective profile is:

[source,yaml]
build-env:
  CFLAGS: -O0
  SOMEVAR: ok
projects:
  lttng-tools:
    source: 'https://github.com/lttng/lttng-tools.git'
    checkout: stable-2.11
    build-env:
      CC: clang
      CFLAGS: ''
  lttng-ust:
    source: 'http://lttng.org/files/lttng-ust/lttng-ust-2.11.0.tar.bz2'
    configure: --enable-python-agent --enable-java-agent-jul
  lttng-modules:
    source: 'git://git.lttng.org/lttng-modules.git'
    checkout: stable-2.11
  urcu:
    source: 'git://git.liburcu.org/userspace-rcu.git'


[[override]]
Override a profile property
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Replace, append to, and remove effective profile properties (after
`vlttng` has merged all the profiles given with the opt:--profile option
as an effective profile) with the opt:--override option.

Example:

----
-o projects.lttng-tools.configure+=--disable-bin-lttng-relayd \
-o '!projects.lttng-ust.checkout' \
-o build-env.CC=clang
----

In replace and append modes, `vlttng` creates the property if it does
not exist. This allows you to create projects on the command line:

----
-o projects.lttng-tools.source=https://github.com/lttng/lttng-tools.git \
-o projects.lttng-tools.checkout=v2.11.0 \
-o projects.lttng-tools.configure='--disable-bin-lttng --disable-man-pages'
----

`vlttng` applies the overrides in command line order.


Ignore a project
~~~~~~~~~~~~~~~~
Ignore specific projects that exist in the effective profile with the
`--ignore-project` (`-i`) option:

----
$ vlttng -p lttng-stable-2.11 -p urcu-master -i lttng-ust virt
----

This is the equivalent of removing the project's property with an
<<override,override>>:

----
$ vlttng -p lttng-stable-2.11 -p urcu-master -o '!projects.lttng-ust' virt
----


Activation script options
~~~~~~~~~~~~~~~~~~~~~~~~~
When you source the `activate` script, use the following environment
variables to alter its behaviour:

`VLTTNG_NO_RMMOD`::
    Set to `1` to disable the unloading of the currently loaded LTTng
    kernel modules.

`VLTTNG_NO_PROMPT`::
    Set to `1` to keep your current shell prompt after the activation.


Use `sudo`
~~~~~~~~~~
If you use `sudo` when the virtual environment is activated, make sure
to use its `--preserve-env` (`-E`) option so that the virtual
environment is preserved when it executes the command.

Also use the `env` command, setting the `PATH` variable to its current
value because otherwise `sudo` won't find the command.

For example, to start a root LTTng session daemon which loads the LTTng
kernel modules installed in the virtual environment:

----
$ sudo --preserve-env env PATH="$PATH" lttng-sessiond --daemonize
----


Trace a Java application
~~~~~~~~~~~~~~~~~~~~~~~~
When the LTTng-UST project is built with a Java agent, the activation
of the virtual environment sets the `VLTTNG_CLASSPATH` environment
variable to a Java class path to use when you compile and run
Java applications.

Example:

----
javac -cp $VLTTNG_CLASSPATH MyClass.java
java -cp $VLTTNG_CLASSPATH:. MyClass
----


Use the virtual environment's Python packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If the LTTng-UST Python agent is built and installed in the virtual
environment, there's nothing special to do to trace a Python
application: the `PYTHONPATH` environment variable contains the path to
the LTTng-UST Python agent package in the virtual environment. You can
import the `lttngust` package as usual.

As such, you can import the `babeltrace` and `bt2` Python{nbsp}3
packages directly.


Update a project with a Git source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`vlttng` generates the following scripts in the virtual environment's
root directory (`NAME` is the project name):

`conf-NAME.bash`::
    Runs the configuration step of the project.

`build-NAME.bash`::
    Runs the build step of the project.

`install-NAME.bash`::
    Runs the install step of the project.

`update-NAME.bash` (only with a Git source)::
    Fetches the project's configured Git remote, checks out the latest
    version of the configured branch, and runs `conf-NAME.bash`,
    `build-NAME.bash`, and `install-NAME.bash`.

IMPORTANT: Use those scripts with caution. For a stable branch, they
_should_ work most of the time. For the `master` branch, some required
implicit configuration and build command lines might be missing from the
scripts when you use the update script.


OPTIONS
-------
opt:-f, opt:--force::
    Force the creation of the virtual environment. This removes any
    existing 'VPATH' directory first.

opt:--hide-export::
    Hide the environment variable export lines from the command's
    output.

opt:-i 'PROJECT', opt:--ignore-project='PROJECT'::
    Completely remove the project named 'PROJECT' from the effective
    profile.
+
You can repeat this option. `vlttng` ignores projects once
it has processed the (opt:--override) and (opt:--profile) options.

opt:-j ['JOBS'], opt:--jobs[='JOBS']::
		Run 'JOBS' commands simultaneously when building each
    project. `vlttng` passes this option as is to man:make(1).

opt:--list-default-profiles::
    List the default (built-in) profile names and exit.

opt:-o 'ORIDE', opt:--override='ORIDE'::
    Override a specific property in the effective profile.
+
Three override operators are available:
+
--
'PATH'='VALUE'::
    Assign 'VALUE' to 'PATH'. 'PATH' is created if it does not exist.

'PATH'+='VALUE'::
    Append 'VALUE' to 'PATH'. 'PATH' must point to a string property.
    'PATH' is created if it does not exist.

!'PATH'::
    Remove 'PATH'.
--
+
'PATH' is a dot-separated list of keys to find recursively in the
effective profile, for example, `projects.lttng-tools.configure`.
+
You can repeat this option. `vlttng` applies the overrides in
command-line order once it has merged all the profiles (opt:--profile)
as an effective profile, but before it has ignored projects
(opt:--ignore-project).

opt:-p 'PROFILE', opt:--profile='PROFILE'::
    Merge profile 'PROFILE' with the current effective profile.
+
'PROFILE' is either the name, without the extension, of a default
profile (see `vlttng --list-default-profiles` for the complete list) or
a path to a profile file (including its extension).
+
You can repeat this option. `vlttng` merges the profiles in command-line
order.

opt:-v, opt:--verbose::
    Print additional information while creating the virtual environment.
+
With this option, `vlttng` prints the output of all the commands
it executes. It also prints the effective profile used to create the
virtual environment.

opt:-h, opt:--help::
    Show the command's help.

opt:-V, opt:--version::
    Show the command's version.


EXIT STATUS
-----------
0::
    Success

Not 0::
    Error


BUGS
----
Please report any bug or usability issue as a
https://github.com/eepp/vlttng/issues[GitHub issue].


RESOURCES
---------
* https://github.com/eepp/vlttng[GitHub repository]
* http://lists.lttng.org[Mailing list] for support and
  development: `lttng-dev@lists.lttng.org` (prefix the subject message
  with `[vlttng]`)
* irc://irc.oftc.net/lttng[IRC channel]: `#lttng` on `irc.oftc.net`
  (`eepp` is vlttng's author and maintainer)


COPYRIGHT
---------
Copyright (c) 2016-2020 mailto:eeppeliteloop@gmail.com[Philippe Proulx].

vlttng is distributed under the
https://github.com/eepp/vlttng/blob/master/LICENSE[MIT License].


AUTHORS
-------
vlttng was originally written by and is maintained by, as of vlttng
{vlttng_version}, mailto:eeppeliteloop@gmail.com[Philippe Proulx].
